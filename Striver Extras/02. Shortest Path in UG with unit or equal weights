// kind of BFS
class Solution {
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edge: edges){
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int[] dist = new int[n];
        Arrays.fill(dist, -1);
        dist[src] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.offer(src);
        while(!q.isEmpty()){
            int curr = q.poll();
            for(int nei: adj.get(curr)){
                if(dist[nei] == -1){
                    dist[nei] = dist[curr] + 1;
                    q.offer(nei);
                }
            }
        }
        return dist;
    }
}
