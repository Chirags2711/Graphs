class Solution {
    public boolean isEularCircuitExist(int V, ArrayList<ArrayList<Integer>> adj) {
        // Calculating degree
        int degree[] = new int[V];
        for(int u=0; u<V; u++){
            ArrayList<Integer> vList = adj.get(u);
            for(int v: vList){
                degree[v]++;
            }
        }
        
        
        // Checking non zero degree are connected
        boolean vis[] = new boolean[V];
        boolean firstNonZeroDegree = true;
        for(int u=0; u<V; u++){
            if(!vis[u] && degree[u] != 0){
                if(firstNonZeroDegree){
                    DFS(u, vis, adj);
                    firstNonZeroDegree = false;
                }else{
                    return 0; // None
                }
            }
        }
        
        
        // Checking for EP or EU or None
        int countOdds = 0;
        for(int i=0; i<V; i++){
            countOdds += degree[i] % 2;
            if(countOdds > 2) return 0; // None
        }
        return countOdds == 0 ? 2 : 1; // either 0 odd degrees or 2, 0 means EC, 2 means EP
        // if only EC check was there, return false on encounter of first odd degree
    }
    
    public void DFS(int curr, boolean[] vis, ArrayList<ArrayList<Integer>> adj){
        if(vis[curr]){
            return;
        }
        vis[curr] = true;
        for(int nei: adj.get(curr)){
            DFS(nei, vis, adj);
        }
    }
}
