// DSU By Rank

class DisjointSetByRank {
    int rank[];
    int parent[];
    DisjointSetByRank(int n){
        rank = new int[n+1]; // rank 0 initially
        parent = new int[n+1];
        for(int i=0; i<=n; i++){ // Will work for 0 to n-1 as well as 1 to n
            parent[i] = i; // initially single element sets
        }
    }
    public int findParent(int node){ //Ultimate parent
        if(parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]); // Path Compression
    }
    public void unionByRank(int u, int v){
        int pu = findParent(u); // Ultimate parent of u
        int pv = findParent(v); // Ultimate parent of u
        if(pu == pv) return;
        if(rank[pv]>rank[pu]){
            parent[pu] = pv; // pu --> pv
        }else if(rank[pu]>rank[pv]){
            parent[pv] = pu; // pv --> pu
        }else{ //either, and increase rank of chosen parent
            parent[pv] = pu; // here, we did pv --> pu, can do otherwise
            rank[pu]++;
        }
    }
}
