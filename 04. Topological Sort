// FOR DAG ONLY.
// Use path Vis to detect cycle in DFS.

// If not DAG, size of topo array will be less than V.(BFS)

// DFS
int[] topoSort(int N, ArrayList<ArrayList<Integer>> adj) {
    Stack<Integer> st = new Stack<Integer>(); 
    boolean vis[] = new boolean[N]; 
    
    for(int i = 0;i<N;i++) {
        if(!vis[i]) {
            topoSortHelper(i, vis, adj, st);
        }
    }
    
    int topo[] = new int[N];
    int ind = 0; 
    while(!st.isEmpty()) {
        topo[ind++] = st.pop();
    }
    return topo; 
}
void topoSortHelper(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, Stack<Integer> st) {
    vis[node] = true; 
    for(Integer it: adj.get(node)) {
        if(!vis[it]) {
            topoSortHelper(it, vis, adj, st); 
        } 
    }
    st.push(node); 
}

// BFS (Kahn's Algorithm)
int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
{
    int indegree[] = new int[V];
    for(int u=0; u<V; u++){
        for(int v: adj.get(u)){
            indegree[v]++;
        }
    }
    Queue<Integer> q = new LinkedList<>();
    int[] ans = new int[V];
    int index = 0;
    for(int v=0; v<V; v++){
        if(indegree[v] == 0){
            q.offer(v);
        }
    }
    while(!q.isEmpty()){
        int u = q.poll();
        ans[index++] = u;
        for(int v: adj.get(u)){
            indegree[v]--;
            if(indegree[v] == 0){
                q.offer(v);
            }
        }
    }
    
    return ans;
}
