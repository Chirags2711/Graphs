// SC: Adj List = 2 * E
// SC: Adj Matrix = N * N


// DFS
public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
    // Code here
    boolean vis[] = new boolean[V];
    ArrayList<Integer> list = new ArrayList<>();
    for(int i=0; i<V; i++){
        DFS(adj, vis, list, i);
    }
    return list;
}
public static void DFS(ArrayList<ArrayList<Integer>> adj, boolean vis[], ArrayList<Integer> list, int currNode) {
    if(vis[currNode]){
        return;
    }
    vis[currNode] = true;
    list.add(currNode);
    for(int nei: adj.get(currNode)){
        DFS(adj, vis, list, nei);
    }
}

    
// BFS
public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
    boolean vis[] = new boolean[V];
    ArrayList<Integer> list = new ArrayList<>();
    for(int i=0; i<V; i++){
        if(!vis[i]){
            BFS(adj, vis, list, i);
        }
    }
    return list;
}
public void BFS(ArrayList<ArrayList<Integer>> adj, boolean vis[], ArrayList<Integer> list, int node){
    if(vis[node]){
        return;
    }
    Queue<Integer> q = new LinkedList<>();
    q.offer(node);
    vis[node] = true;
    while(!q.isEmpty()){
        int currNode = q.poll();
        list.add(currNode);
        for(int neighbor: adj.get(currNode)){
            if(!vis[neighbor]) {
                q.offer(neighbor);
                vis[neighbor] = true;
            }
        }
    }
    return;
}
