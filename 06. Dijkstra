// Dijkstra: Single Source Shortest Path

// For path, store a parent array


// 1. Using PQ
class Pair{
    int distance;
    int node;
    public Pair(int d, int n){
        distance = d;
        node = n;
    }
}

class Solution{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {
        // Write your code here
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        fun(S, adj, dist);
        return dist;
    }
    static void fun(int S, ArrayList<ArrayList<ArrayList<Integer>>> adj, int[] dist){
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        dist[S] = 0;
        pq.offer(new Pair(0, S));
        while(!pq.isEmpty()){
            Pair p = pq.poll();
            int currNode = p.node;
            int currDist = p.distance;
            for(List<Integer> neiList: adj.get(currNode)){
                int nei = neiList.get(0);
                int edgeWt = neiList.get(1);
                if(currDist + edgeWt < dist[nei]){
                    dist[nei] = currDist + edgeWt;
                    pq.offer(new Pair(dist[nei], nei));
                }
            }
        }
    }
}

// 2. Priority Queue with removal

class Pair{
    int distance;
    int node;
    public Pair(int d, int n){
        distance = d;
        node = n;
    }
    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof Pair)) {
            return false;
        }
        Pair c = (Pair) o;
        return Double.compare(node, c.node) == 0;
    }
}

class Solution{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {
        // Write your code here
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        fun(S, adj, dist);
        return dist;
    }
    static void fun(int S, ArrayList<ArrayList<ArrayList<Integer>>> adj, int[] dist){
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        dist[S] = 0;
        pq.offer(new Pair(0, S));
        while(!pq.isEmpty()){
            Pair p = pq.poll();
            int currNode = p.node;
            int currDist = p.distance;
            for(List<Integer> neiList: adj.get(currNode)){
                int nei = neiList.get(0);
                int edgeWt = neiList.get(1);
                if(currDist + edgeWt < dist[nei]){
                    pq.remove(new Pair(dist[nei], nei)); // any distance, does not matter. My custom equals method compares node only
                    dist[nei] = currDist + edgeWt;
                    pq.offer(new Pair(dist[nei], nei));
                }
            }
        }
    }
}


// Can be done using a TreeSet(dist, node).
// Cannot be done using TreeMap<Dist, Node> as Dist is not unique.


// 3. 1631. Path With Minimum Effort
class Tuple{
    int x, y, cost;
    public Tuple(int _x, int _y, int c){
        x = _x;
        y = _y;
        cost = c;
    }
}
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length, n = heights[0].length;
        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> a.cost - b.cost);
        int[][] cost = new int[m][n];
        for(int[] arr: cost){
            Arrays.fill(arr, Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        pq.offer(new Tuple(0, 0, 0));
        int dirX[] = {0, 0, -1, 1};
        int dirY[] = {-1, 1, 0, 0};
        while(!pq.isEmpty()){
            Tuple t = pq.poll();
            int currX = t.x;
            int currY = t.y;
            int currCost = t.cost;
            if(currX == m-1 && currY == n-1){
                return currCost;
            }
            for(int i=0; i<4; i++){
                int nextX = currX + dirX[i];
                int nextY = currY + dirY[i];
                if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n){
                    int nextCost = Math.max(currCost, Math.abs(heights[nextX][nextY] - heights[currX][currY]));
                    if(nextCost < cost[nextX][nextY]){
                        cost[nextX][nextY] = nextCost;
                        pq.offer(new Tuple(nextX, nextY, nextCost));
                    }
                }
            }
        }
        return cost[m-1][n-1];
    }
}
